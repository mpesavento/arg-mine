:mod:`arg_mine.data.loaders`
============================

.. py:module:: arg_mine.data.loaders


Module Contents
---------------


Functions
~~~~~~~~~

.. autoapisummary::

   arg_mine.data.loaders.convert_datetime_int
   arg_mine.data.loaders.get_gdelt_df
   arg_mine.data.loaders.load_processed_csv
   arg_mine.data.loaders.concat_csvs


.. data:: _logger
   

   

.. data:: GDELT_COL_NAMES
   :annotation: = ['datetime', 'title', 'headline_image_url', 'content_url', 'topic_context']

   

.. function:: convert_datetime_int(datetime_int)

   Convert an integer in format `YYYYMMDDHHMMSS` to pd.Timestamp
    eg, `20200107101500` to `2020.01.07T10:15:00`

   :param datetime_int: long integer with date and time, 14 char long
   :type datetime_int: int

   :returns:
   :rtype: pd.Timestamp

   :raises ValueError : when int is not 14 char long:


.. function:: get_gdelt_df(csv_filepath, col_names=GDELT_COL_NAMES)

   From CSV path, load a pandas dataframe with the GDELT URL dataset

   :param csv_filepath:
   :type csv_filepath: str, path
   :param col_names:
   :type col_names: List[str]

   :returns:
   :rtype: pd.DataFrame


.. function:: load_processed_csv(filename, project='gdelt-climate-change-docs', drop_nan_cols=None)


.. function:: concat_csvs(filename_glob, read_path)

   Given a globbed filename (eg "my_files_doc*.csv"), concatenate the returned
   CSVs into a DataFrame

   :param filename_glob: filename matching the target files, needs to match the requirements from `glob` module
                         Eg: ``"gdelt_2020_docs_docs*.csv"`` will find all files matching that pattern
   :type filename_glob: str
   :param read_path: base path to start looking for the files
   :type read_path: str

   :returns:
   :rtype: pd.DataFrame


