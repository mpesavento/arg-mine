:mod:`arg_mine.utils`
=====================

.. py:module:: arg_mine.utils

.. autoapi-nested-parse::

   Utility methods



Module Contents
---------------


Functions
~~~~~~~~~

.. autoapisummary::

   arg_mine.utils.get_logger
   arg_mine.utils.enum
   arg_mine.utils.unique_hash
   arg_mine.utils.dataclasses_to_dicts
   arg_mine.utils.get_url_hostnames


.. data:: LOG_FMT
   :annotation: = %(levelname)s:%(asctime)s:%(name)s: %(message)s

   

.. data:: _logger
   :annotation: :Optional[logging.Logger]

   

.. data:: loggers
   

   

.. function:: get_logger(name, level=logging.INFO)


.. function:: enum(**named_values)

   Named enum. Doesnt need to use the Enum.NAME.value with the built in Enum

   .. rubric:: Example

   >>> MY_CONSTANTS = enum(FOO="foo", BAR="bar")
   >>> MY_CONSTANTS.FOO
   "foo"

   :param named_values: key is parameter name and value is parameter value (eg string)
   :type named_values: dict

   :returns:
   :rtype: Enum class


.. function:: unique_hash(input_str: str) -> str

   Uses MD5 to return a unique key, assuming the input string is unique


.. function:: dataclasses_to_dicts(data)

   Converts a list of dataclass instances to a list of dictionaries
   :param data:
   :type data: List[Type[dataclass]]

   :returns: **list_dict**
   :rtype: List[dict]

   .. rubric:: Examples

   >>> @dataclass
   >>> class Point:
   ...     x: int
   ...     y: int
   >>> dataclasses_to_dicts([Point(1,2), Point(2,3)])
   [{"x":1,"y":2},{"x":2,"y":3}]


.. function:: get_url_hostnames(urls: pd.Series)


